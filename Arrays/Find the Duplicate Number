Approaches:
1) Using Space --> O(n), O(n)
2) Slow and fast method in arrays (imp) --> O(n), O(1)
3) using fixed length array --> O(n), O(1)
4) using math --> O(n), O(1)

class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        s=set()
        for i in nums:
            if i in s:
                return i
            s.add(i)

        # slow=nums[0]
        # fast=nums[0]
        # while True:
        #     slow=nums[slow]
        #     fast=nums[nums[fast]]
        #     if slow==fast:
        #         break
        # fast=nums[0]
        # while slow!=fast:
        #     slow=nums[slow]
        #     fast=nums[fast]
        # return slow


        map1=[0]*len(nums)
        for num in nums:
            if map1[num]==1:
                return num
            map1[num]=1


        #return (sum(nums) - sum(set(nums))) // (len(nums) - len(set(nums)))
